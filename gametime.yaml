openapi: 3.0.0

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/davetii/Gametime/1.0.0
  - url: http://localhost:8080
    description: Dev Server
info:
  description: Gametime API
  version: "1.0.0"
  title: Gametime API
  contact:
    email: davetii@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /v1/league:
    get:
      summary: list of all conferences, teams, players in league
      description: a list of all **Actors** in the league
      tags:
      - Teams
      operationId: getLeagueV1
      responses:
        '200':
          description: list of all conferences, teams, players in league
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConferenceList"

  /v1/conference/{confId}:
    parameters:
    - in: path
      name: confId
      required: true
      schema: 
        type: string

    get:
      summary: list of all teams in a  given conference
      description: a list of all **Teams** in the league in a given conference
      tags:
      - Teams
      operationId: getConferenceByIdV1
      responses:
        '200':
          description: returns a list of all teams in a given conference
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conference"

  /v1/teams:
    get:
      summary: list of all teams
      description: a list of all **Teams** in the league
      tags:
      - Teams
      operationId: getTeamsV1
      responses:
        '200':
          description: returns a list of all teams
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamList"


  /v1/teams/{teamId}:
    get:
      summary: fetch Team by id
      tags: 
        - Teams
      operationId: getTeamByIdV1
      parameters:
        - $ref: "#/components/parameters/teamIdPathParam"
      responses:
        '200':
          description: Found Team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        '404':
          description: Not Found
    put:
      summary: Add Player to a team
      description: Add Player to a team
      operationId: addPlayerToTeamV1
      tags: 
        - Teams
      parameters:
        - $ref: "#/components/parameters/teamIdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Team"
      responses:
        '204':
          description: Team Updated
        '404':
          description: Not Found
    delete:
      summary: Remove Player from Team
      description: Remove Player from Team
      operationId: removePlayerFromTeamV1
      tags: 
        - Teams
      parameters:
        - $ref: "#/components/parameters/teamIdPathParam"
      responses:
        '200':
          description: Team Updated
        '404':
          description: Not Found
      
  /v1/players:
    get:
      tags:
        - Players
      operationId: listPlayersV1
      summary: List all players in the league
      description: |
        returns a list of all players
      parameters:
      - $ref: "#/components/parameters/pageNumberParam"
      - $ref: "#/components/parameters/pageSizeParam"
      responses:
        '200':
          description: Return a List of Players in the system
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/PlayersPagedList"
                
    post:
      summary: New Player
      description: Create a new Player
      operationId: createPlayerV1
      tags: 
        - Players
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Player"
      responses:
        '201':
          description: Player Created
          headers:
            Location:
              schema:
                type: string
                format: uri
                example: http://localhost/v1/players/{newPlayerId}
        '400':
          description: Bad Request
          
  /v1/players/{playerId}:
    get:
      summary: fetch player by id
      tags: 
        - Players
      operationId: getPlayerByIdV1
      parameters:
        - $ref: "#/components/parameters/playerIdPathParam"
      responses:
        '200':
          description: Found Player
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Player"
        '404':
          description: Not Found
    put:
      summary: Update Player
      description: Update an existing player
      operationId: updatePlayerByIdV1
      tags: 
        - Players
      parameters:
        - $ref: "#/components/parameters/playerIdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Player"
      responses:
        '204':
          description: Player Updated
        '404':
          description: Not Found
    delete:
      summary: Delete Player
      description: Delete an existing player
      operationId: deletePlayerByIdV1
      tags: 
        - Players
      parameters:
        - $ref: "#/components/parameters/playerIdPathParam"
      responses:
        '200':
          description: Payer Updated
        '404':
          description: Not Found
              
      
components:
  
  parameters:
  
    confIdPathParam:
      in: path
      description: Conference ID
      name: confId
      required: true
      schema:
        type: string
  
    pageNumberParam:
      in: query
      description: Page number
      name: pageNumber
      schema: 
        type: integer
        format: int32
        default: 1 
        
    pageSizeParam:
      in: query
      description: Page Size
      name: pageSize
      required: false
      schema:
        type: integer
        format: int32
        default: 25
        
    playerIdPathParam:
      in: path
      description: Player Id
      name: playerId
      required: true
      schema:
        type: string
        format: uuid

    teamIdPathParam:
      in: path
      description: Team ID
      name: teamId
      required: true
      schema:
        type: string

   
        
  schemas:
    ConferenceList:
      type: array
      items:
        $ref: "#/components/schemas/Conference"

    Conference:
      type: object
      description: A collection of teams organized by a region
      properties:
        id: 
          type: string
          readOnly: true
          enum: [EAST, NORTH, SOUTH, WEST]
        teams:
          $ref: "#/components/schemas/TeamList"

    TeamList:
      type: array
      items:
        $ref: "#/components/schemas/Team"
        
    Team:
      type: object
      description: A group of individuals representing a locale
      properties:
        id:
          type: string
          readOnly: true
          enum: [NY, PHI, BOS, CON, JACK, NC, WASH, ATL, BRK, MIA, MI, CHI, TOR, VIR, IND, CLEV, MIN, PIT, MIL, BUF, 
                TEN, KC, STL, HOU, SA, NO,DAL, DEN, OKL, ALA, SD, LA, PHO, CA, POR, SF, SEA, UT, VAN, LV]
        players:
          $ref: "#/components/schemas/PlayerList"
        locale:
          type: string
        name:
          type: string
        coach:
          $ref: "#/components/schemas/Coach"
        gm:
          $ref: "#/components/schemas/GM"

    Coach:
      type: object
      properties:
        firstName: 
          type: string
        lastName: 
          type: string

    GM:
      type: object
      properties:
        firstName: 
          type: string
        lastName: 
          type: string

    Player:
      type: object
      description: Player
      required:
        - id
        - firstName
        - lastName
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        firstName:
          type: string
          example: Bob
        lastName:
          type: string
          example: Johnson
        position:
          type: string
          enum: [PG, CG, 2G, W, SF, F, PF, FC, C]
        height:
          type: string
        weight:
          type: integer
        yearsPro:
          type: integer
        origin:
          type: string
        attrbitues:
          $ref: "#/components/schemas/PlayerAttributes"
        skills:
          $ref: "#/components/schemas/PlayerSkills"

    PlayerSkills:
      type: object
      description: Player Skill Set
      properties:
        acumen:
            type: number
        ballSecurity:
            type: number
        passing:
            type: number
        teamOffense:
            type: number
        drive:
            type: number
        freeThrows:
            type: number
        longRange:
            type: number
        perimeter:
            type: number
        post:
            type: number
        individualDefense:
            type: number
        teamDefense:
            type: number
        offenseRebound:
            type: number
        defenseRebound:
            type: number

        
      
    PlayerAttributes:
      type: object
      description: Player Attributes
      properties:
        agility:
          type: integer
          format: int32
        charisma:
          type: integer
          format: int32
        determination:
          type: integer
          format: int32
        ego:
          type: integer
          format: int32
        endurance:
          type: integer
          format: int32
        energy:
          type: integer
          format: int32
        handle:
          type: integer
          format: int32
        health:
          type: integer
          format: int32
        intelligence:
          type: integer
          format: int32
        luck:
          type: integer
          format: int32
        person:
          type: integer
          format: int32
        shotSelection:
          type: integer
          format: int32
        shotSkill:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        speed:
          type: integer
          format: int32
        strength:
          type: integer
          format: int32
    PlayerList:
      type: array
      items:
         $ref: "#/components/schemas/Player"
         
    PlayersPagedList: 
      type: object
      properties: 
        content: 
          $ref: "#/components/schemas/PlayerList"
      allOf: 
        - $ref: "#/components/schemas/PagedResponse"
    PagedResponse:
      type: object
      properties:
        pageable:
          $ref: '#/components/schemas/PagedResponse_pageable'
        totalPages:
          type: integer
          format: int32
        last:
          type: boolean
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        first:
          type: boolean
    PagedResponse_pageable_sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PagedResponse_pageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        offset:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean