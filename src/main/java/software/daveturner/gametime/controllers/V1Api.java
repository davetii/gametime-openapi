/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package software.daveturner.gametime.controllers;

import software.daveturner.gametime.domain.Conference;
import software.daveturner.gametime.domain.Player;
import software.daveturner.gametime.domain.PlayersPagedList;
import software.daveturner.gametime.domain.Team;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "v1", description = "the v1 API")
public interface V1Api {

    default V1ApiDelegate getDelegate() {
        return new V1ApiDelegate() {};
    }

    /**
     * PUT /v1/teams/{teamId} : Add Player to a team
     * Add Player to a team
     *
     * @param teamId Team ID (required)
     * @param team  (required)
     * @return Team Updated (status code 204)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Add Player to a team", nickname = "addPlayerToTeamV1", notes = "Add Player to a team", tags={ "Teams", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Team Updated"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/teams/{teamId}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addPlayerToTeamV1(@ApiParam(value = "Team ID", required = true) @PathVariable("teamId") String teamId,@ApiParam(value = "", required = true) @Valid @RequestBody Team team) {
        return getDelegate().addPlayerToTeamV1(teamId, team);
    }


    /**
     * POST /v1/players : New Player
     * Create a new Player
     *
     * @param player  (required)
     * @return Player Created (status code 201)
     *         or Bad Request (status code 400)
     */
    @ApiOperation(value = "New Player", nickname = "createPlayerV1", notes = "Create a new Player", tags={ "Players", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Player Created"),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/players",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> createPlayerV1(@ApiParam(value = "", required = true) @Valid @RequestBody Player player) {
        return getDelegate().createPlayerV1(player);
    }


    /**
     * DELETE /v1/players/{playerId} : Delete Player
     * Delete an existing player
     *
     * @param playerId Player Id (required)
     * @return Payer Updated (status code 200)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Delete Player", nickname = "deletePlayerByIdV1", notes = "Delete an existing player", tags={ "Players", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Payer Updated"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/players/{playerId}"
    )
    default ResponseEntity<Void> deletePlayerByIdV1(@ApiParam(value = "Player Id", required = true) @PathVariable("playerId") UUID playerId) {
        return getDelegate().deletePlayerByIdV1(playerId);
    }


    /**
     * GET /v1/conference/{confId} : list of all teams in a  given conference
     * a list of all **Teams** in the league in a given conference
     *
     * @param confId  (required)
     * @return returns a list of all teams in a given conference (status code 200)
     */
    @ApiOperation(value = "list of all teams in a  given conference", nickname = "getConferenceByIdV1", notes = "a list of all **Teams** in the league in a given conference", response = Conference.class, tags={ "Teams", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "returns a list of all teams in a given conference", response = Conference.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/conference/{confId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Conference> getConferenceByIdV1(@ApiParam(value = "", required = true) @PathVariable("confId") String confId) {
        return getDelegate().getConferenceByIdV1(confId);
    }


    /**
     * GET /v1/league : list of all conferences, teams, players in league
     * a list of all **Actors** in the league
     *
     * @return list of all conferences, teams, players in league (status code 200)
     */
    @ApiOperation(value = "list of all conferences, teams, players in league", nickname = "getLeagueV1", notes = "a list of all **Actors** in the league", response = Conference.class, responseContainer = "List", tags={ "Teams", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "list of all conferences, teams, players in league", response = Conference.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/league",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Conference>> getLeagueV1() {
        return getDelegate().getLeagueV1();
    }


    /**
     * GET /v1/players/{playerId} : fetch player by id
     *
     * @param playerId Player Id (required)
     * @return Found Player (status code 200)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "fetch player by id", nickname = "getPlayerByIdV1", notes = "", response = Player.class, tags={ "Players", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Found Player", response = Player.class),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/players/{playerId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Player> getPlayerByIdV1(@ApiParam(value = "Player Id", required = true) @PathVariable("playerId") UUID playerId) {
        return getDelegate().getPlayerByIdV1(playerId);
    }


    /**
     * GET /v1/teams/{teamId} : fetch Team by id
     *
     * @param teamId Team ID (required)
     * @return Found Team (status code 200)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "fetch Team by id", nickname = "getTeamByIdV1", notes = "", response = Team.class, tags={ "Teams", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Found Team", response = Team.class),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/teams/{teamId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Team> getTeamByIdV1(@ApiParam(value = "Team ID", required = true) @PathVariable("teamId") String teamId) {
        return getDelegate().getTeamByIdV1(teamId);
    }


    /**
     * GET /v1/teams : list of all teams
     * a list of all **Teams** in the league
     *
     * @return returns a list of all teams (status code 200)
     */
    @ApiOperation(value = "list of all teams", nickname = "getTeamsV1", notes = "a list of all **Teams** in the league", response = Team.class, responseContainer = "List", tags={ "Teams", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "returns a list of all teams", response = Team.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/teams",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Team>> getTeamsV1() {
        return getDelegate().getTeamsV1();
    }


    /**
     * GET /v1/players : List all players in the league
     * returns a list of all players 
     *
     * @param pageNumber Page number (optional, default to 1)
     * @param pageSize Page Size (optional, default to 25)
     * @return Return a List of Players in the system (status code 200)
     */
    @ApiOperation(value = "List all players in the league", nickname = "listPlayersV1", notes = "returns a list of all players ", response = PlayersPagedList.class, tags={ "Players", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return a List of Players in the system", response = PlayersPagedList.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/players",
        produces = { "application/json" }
    )
    default ResponseEntity<PlayersPagedList> listPlayersV1(@ApiParam(value = "Page number", defaultValue = "1") @Valid @RequestParam(value = "pageNumber", required = false, defaultValue = "1") Integer pageNumber,@ApiParam(value = "Page Size", defaultValue = "25") @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "25") Integer pageSize) {
        return getDelegate().listPlayersV1(pageNumber, pageSize);
    }


    /**
     * DELETE /v1/teams/{teamId} : Remove Player from Team
     * Remove Player from Team
     *
     * @param teamId Team ID (required)
     * @return Team Updated (status code 200)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Remove Player from Team", nickname = "removePlayerFromTeamV1", notes = "Remove Player from Team", tags={ "Teams", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Team Updated"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/teams/{teamId}"
    )
    default ResponseEntity<Void> removePlayerFromTeamV1(@ApiParam(value = "Team ID", required = true) @PathVariable("teamId") String teamId) {
        return getDelegate().removePlayerFromTeamV1(teamId);
    }


    /**
     * PUT /v1/players/{playerId} : Update Player
     * Update an existing player
     *
     * @param playerId Player Id (required)
     * @param player  (required)
     * @return Player Updated (status code 204)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Update Player", nickname = "updatePlayerByIdV1", notes = "Update an existing player", tags={ "Players", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Player Updated"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/players/{playerId}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updatePlayerByIdV1(@ApiParam(value = "Player Id", required = true) @PathVariable("playerId") UUID playerId,@ApiParam(value = "", required = true) @Valid @RequestBody Player player) {
        return getDelegate().updatePlayerByIdV1(playerId, player);
    }

}
